import json
import sys
import re

states_dictbb = {"MS": [30.1477890014648, 34.9960556030273, -91.6550140380859, -88.0980072021484],
"OK": [33.6191940307617, 37.0021362304688, -103.002571105957, -94.4312133789062],
"DE": [38.4511260986328, 39.8394355773926, -75.7890472412109, -74.9846343994141],
"MN": [43.4994277954102, 49.3844909667969, -97.2392654418945, -89.4833831787109],
"IL": [36.9701309204102, 42.5083045959473, -91.513053894043, -87.0199203491211],
"AR": [33.0041046142578, 36.4996032714844, -94.6178131103516, -89.6422424316406],
"NM": [31.3323001861572, 37.0001411437988, -109.050178527832, -103.000862121582],
"IN": [37.7717399597168, 41.7613716125488, -88.0997085571289, -84.7845764160156],
"LA": [28.9210300445557, 33.019458770752, -94.0431518554688, -88.817008972168],
"TX": [25.8370609283447, 36.5007057189941, -106.645652770996, -93.5078201293945],
"WI": [42.491943359375, 47.3025016784668, -92.8881149291992, -86.2495422363281],
"KS": [36.9930801391602, 40.0030975341797, -102.0517578125, -94.5882034301758],
"CT": [40.9667053222656, 42.0505905151367, -73.7277755737305, -71.7869873046875],
"VI": [17.6234664916992, 18.4649848937988, -65.1590957641602, -64.5126724243164],
"CA": [32.5295219421387, 42.0095024108887, -124.482009887695, -114.13077545166],
"PR": [17.8315086364746, 18.5680027008057, -67.9987564086914, -65.1685028076172],
"GA": [30.3557567596436, 35.0008316040039, -85.6051712036133, -80.7514266967773],
"ND": [45.9350357055664, 49.0004920959473, -104.049270629883, -96.5543899536133],
"PA": [39.7197647094727, 42.5146903991699, -80.5210876464844, -74.6894989013672],
"WV": [37.2014808654785, 40.638801574707, -82.6447448730469, -77.7190246582031],
"AK": [51.0228691101074, 71.6048278808594, -180.0, -140.0],
"MO": [35.9956817626953, 40.6136360168457, -95.7741470336914, -89.0988388061523],
"SD": [42.4798889160156, 45.9454536437988, -104.05770111084, -96.4363327026367],
"CO": [36.9924240112305, 41.0023612976074, -109.060256958008, -102.041580200195],
"NJ": [38.7887535095215, 41.3574256896973, -75.5633926391602, -73.8850555419922],
"WA": [45.5437202453613, 49.00244140625, -124.836097717285, -116.917427062988],
"NY": [40.4773979187012, 45.0158615112305, -79.7625122070312, -71.8527069091797],
"NV": [35.0018730163574, 42.0022087097168, -120.005729675293, -114.039642333984],
"MD": [37.8856391906738, 39.7229347229004, -79.4871978759766, -75.0395584106445],
"ID": [41.9880561828613, 49.000846862793, -117.243034362793, -111.043563842773],
"WY": [40.9948768615723, 45.0034217834473, -111.05689239502, -104.052154541016],
"AZ": [31.3321762084961, 37.0042610168457, -114.818359375, -109.045196533203],
"IA": [40.3755989074707, 43.5011367797852, -96.6397171020508, -90.1400604248047],
"MI": [41.6960868835449, 48.3060646057129, -90.4186248779297, -82.122802734375],
"UT": [36.9979667663574, 42.0013885498047, -114.053932189941, -109.041069030762],
"VA": [36.5407867431641, 39.4660148620605, -83.6754150390625, -75.2312240600586],
"OR": [41.9917907714844, 46.2991027832031, -124.703544616699, -116.463500976562],
"MT": [44.3582191467285, 49.0011100769043, -116.050003051758, -104.039558410645],
"NH": [42.6970405578613, 45.3057823181152, -72.55712890625, -70.534065246582],
"MA": [41.1863288879395, 42.8867149353027, -73.5081481933594, -69.8615341186523],
"SC": [32.0333099365234, 35.2155418395996, -83.35400390625, -78.4992980957031],
"VT": [42.7269325256348, 45.0166664123535, -73.437744140625, -71.4653549194336],
"Fl": [24.3963069915771, 31.0009689331055, -87.6349029541016, -79.9743041992188],
"HI": [18.8654594421387, 28.5172691345215, -178.443603515625, -154.755783081055],
"KY": [36.4967155456543, 39.1474609375, -89.5715103149414, -81.9645385742188],
"RI": [41.055534362793, 42.018856048584, -71.9070053100586, -71.1204681396484],
"NE": [39.9999961853027, 43.0017013549805, -104.053520202637, -95.3080520629883],
"OH": [38.4031982421875, 42.3232383728027, -84.8203430175781, -80.5189895629883],
"AL": [30.1375217437744, 35.0080299377441, -88.4731369018555, -84.8882446289062],
"NC": [33.7528762817383, 36.5880393981934, -84.3218765258789, -75.4001159667969],
"TN": [34.9829788208008, 36.6781196594238, -90.310302734375, -81.6468963623047],
"ME": [42.9561233520508, 47.4598426818848, -71.0841751098633, -66.9250717163086]}

states_score = {"AL":[0,0], "AK": [0,0], "AZ":[0,0], "AR":[0,0], "CA":[0,0], 
"CO":[0,0], "CT":[0,0], "DC":[0,0], "DE":[0,0], "FL":[0,0], "GA": [0,0],
"HI":[0,0], "ID":[0,0], "IL":[0,0], "IN":[0,0], "IA":[0,0], "KS":[0,0], "KY":[0,0], "LA":[0,0], "ME":[0,0], "MD":[0,0],
"MA":[0,0], "MI":[0,0], "MN":[0,0], "MS":[0,0], "MO":[0,0], "MT":[0,0], "NE":[0,0], "NV":[0,0], "NH":[0,0], "NJ":[0,0],
"NM":[0,0], "NY":[0,0], "NC":[0,0], "ND":[0,0], "OH":[0,0], "OK":[0,0], "OR":[0,0], "PA":[0,0], "RI":[0,0], "SC":[0,0],
"SD":[0,0], "TN":[0,0], "TX":[0,0], "UT":[0,0], "VT":[0,0], "VA":[0,0], "WA":[0,0], "WV":[0,0], "WI":[0,0], "WY":[0,0], "PR":[0,0],
"VI":[0,0]}

def getState(location,method):
    if method == "coordinates":
        for state in states_dictbb:
            if states_dictbb[state][3]  >= location[0] <= states_dictbb[state][2]:
                return state # If coordinates belong to any state
        return None  # If not
    elif method == "place":
        p = re.compile(ur', (\w+)')
        state = re.findall(p, location)
        if state[0] in states_score:
            return state[0] # get state after colon
        return None


def getLocation(tweet):
    if ("text" not in tweet) or (tweet["lang"] != "en"): # Don't process it
        return False, None
    elif "coordinates" in tweet: # Find state by coordinate
        if tweet['coordinates'] is None:
            return False, None
        coord = tweet["coordinates"]['coordinates']
        state = getState(coord,"coordinates")
        if state != None:			
            #print "Coordinates state: " + state
            return True, state
        return False, None
    elif tweet["place"] != None:
        place = tweet["place"]["full_name"]
        state = getState(place,"place")
        if state in states_list:
            #print "Place state: "  + state
            return True, state
        return False, None

def stateScore(scores,tweet_list):
    tweet_score = []
    state_score = {}
    for tweet in tweet_list: # A list of dict
        current_score = 0
        bprocess, state = getLocation(tweet) # If state wasn't found don't get its score
        if bprocess: 
            text = tweet['text'].encode('UTF-8') 
            text = text.lower() 
            text =  re.sub(r'[^\w\s]','',text) # remove punctuation
            text = text.split()
            for word in text: # For each word in the text, get its score
                word = word.lower()
                if word in scores:
                    current_score += scores[word.lower()]
                    tweet_score.append(current_score)
            states_score[state][0] += current_score
            states_score[state][1] += 1 
        else: # If there is no text, or isn't english, score is 0
            tweet_score.append(0)

    # Averaged and Max
    max_score = -10
    for state in states_score:
        if states_score[state][1] != 0:
            states_score[state][0] = states_score[state][0]*1.0/states_score[state][1]
        if states_score[state][0] > max_score:
            max_score = states_score[state][0]
            best_state = state

    print best_state



def hw(sent_file,tweet_file):
	afinnfile = sent_file
	scores = {} # initialize an empty dictionary
	for line in afinnfile:
		term, score  = line.split("\t")  # The file is tab-delimited. "\t" means "tab character"
		scores[term.lower()] = int(score)  # Convert the score to an integer.
	
	tweet_list = []
	for line in tweet_file:
		tweet_list.append(json.loads(line))

	stateScore(scores,tweet_list)

def main():
    dict_file = open(sys.argv[1])
    tweet_file = open(sys.argv[2])
    hw(dict_file,tweet_file)

if __name__ == '__main__':
    main()